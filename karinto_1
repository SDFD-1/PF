class Game:
    def __init__(self):
        self.towers = []
        self.enemies = []

    def add_tower(self, tower):
        self.towers.append(tower)

    def add_enemy(self, enemy):
        self.enemies.append(enemy)

    def update(self):
        for tower in self.towers:
            tower.attack(self.enemies)
        self.enemies = [enemy for enemy in self.enemies if enemy.is_alive()]
        for enemy in self.enemies:
            enemy.move()

    def is_over(self):
        return len(self.enemies) == 0

class Tower:
    def __init__(self, damage, range):
        self.damage = damage
        self.range = range

    def attack(self, enemies):
        for enemy in enemies:
            if self.in_range(enemy):
                enemy.take_damage(self.damage)

    def in_range(self, enemy):
        return enemy.distance < self.range

class Enemy:
    def __init__(self, health, distance):
        self.health = health
        self.distance = distance

    def take_damage(self, damage):
        self.health -= damage

    def is_alive(self):
        return self.health > 0

    def move(self):
        self.distance += 1

# ゲームの初期化
game = Game()

# タワーの追加
tower = Tower(damage=5, range=10)
game.add_tower(tower)

# 敵の追加
enemy = Enemy(health=50, distance=5)
game.add_enemy(enemy)

# ゲームの更新
while not game.is_over():
    game.update()
